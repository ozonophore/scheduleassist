package bot

import (
	context2 "ScheduleAssist/internal/context"
	"ScheduleAssist/internal/contextstore"
	"ScheduleAssist/internal/logger"
	"ScheduleAssist/internal/textanalyzer"
	"context"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func HandleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	logger.Info("Received message from %s: %s", message.From.UserName, message.Text)
	_, ok := context2.GetContextPool().GetContext(message.Chat.ID)
	logger.Debug("Context is new: %v", !ok)
	if !ok {
		handleStart(bot, message.Chat.ID)
		return
	}

	switch message.Text {
	case "/start":
		//SendMessage(bot, message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram-–±–æ—Ç!")
		handleStart(bot, message.Chat.ID)
	case "/tasks":
		SendMessage(bot, message.Chat.ID, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n1. –ü–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞\n2. –ü–æ–≥—É–ª—è—Ç—å —Å —Å–æ–±–∞–∫)")
	case "/add_task":
		SendMessage(bot, message.Chat.ID, "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
	case "/statistic":
		handleStatistics(bot, message.Chat.ID)
	case "/help":
		SendMessage(bot, message.Chat.ID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
			"/start    - üöÄ –ù–∞—á–∞—Ç—å\n"+
			"/tasks    - üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"+
			"/add_task - ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"+
			"/statistic - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"+
			"/help     - ‚ùì –ü–æ–º–æ—â—å")
	default:
		handleDefaultMessage(bot, message)
	}
}

func HandleCallbackQuery(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery) {
	logger.Info("Received callback query from %s: %s", query.From.UserName, query.Data)
	//var responseText string
	messageID := query.Message.MessageID
	switch query.Data {
	//case "week":
	//	responseText = "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ **–Ω–µ–¥–µ–ª—é**"
	//case "month":
	//	responseText = "üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ **–º–µ—Å—è—Ü**"
	//case "two_months":
	//	responseText = "üóìÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ **2 –º–µ—Å—è—Ü–∞**"
	//case "three_months":
	//	responseText = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ **3 –º–µ—Å—è—Ü–∞**"
	case "add_task":
		handleDefaultMessage(bot, query.Message)
	case "tasks":
		updateSubmenu(bot, query.Message.Chat.ID, messageID, "—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
	case "back":
		updateMainMenu(bot, query.Message.Chat.ID, messageID)
	}

	bot.Request(tgbotapi.NewCallback(query.ID, ""))
	//// –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
	//callback := tgbotapi.NewCallback(query.ID, responseText)
	//bot.Send(callback)
	//
	//// –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
	//msg := tgbotapi.NewMessage(query.Message.Chat.ID, responseText)
	//bot.Send(msg)
}

func SendMessage(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}

func handleStart(bot *tgbotapi.BotAPI, chatID int64) {
	sendMainMenu(bot, chatID)
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "tasks"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "add_task"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = buttons
	_, ok := context2.GetContextPool().GetContext(chatID)
	bot.Send(msg)
	logger.Debug("Context is new: %v", !ok)
}

func updateMainMenu(bot *tgbotapi.BotAPI, chatID int64, messageID int) {
	edit := tgbotapi.NewEditMessageText(chatID, messageID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "tasks"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "add_task"),
		),
	)
	edit.ReplyMarkup = &buttons
	bot.Send(edit)
}

func updateSubmenu(bot *tgbotapi.BotAPI, chatID int64, messageID int, section string) {
	msg := tgbotapi.NewEditMessageText(chatID, messageID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ "+section)
	msg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")},
		},
	}
	bot.Send(msg)
}

func handleStatistics(bot *tgbotapi.BotAPI, chatID int64) {
	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", "week"),
			tgbotapi.NewInlineKeyboardButtonData("üìÜ –ó–∞ –º–µ—Å—è—Ü", "month"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóìÔ∏è –ó–∞ 2 –º–µ—Å—è—Ü–∞", "two_months"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –ó–∞ 3 –º–µ—Å—è—Ü–∞", "three_months"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

func handleDefaultMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	context2.GetContextPool().GetContext(chatID)
	userContext := contextstore.Get(chatID)
	if userContext.Context == nil {
		userContext.Context = textanalyzer.Context(context.Background())
	}
	task, content := textanalyzer.PrepareModel(userContext.Context, message.Text)
	if task == nil {
		msg := tgbotapi.NewMessage(chatID, content)
		bot.Send(msg)
	} else {
		userContext.Context = nil
		logger.Debug("Task: %s", task)
	}
}
